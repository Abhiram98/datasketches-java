/*
 * Copyright 2015, Yahoo! Inc.
 * Licensed under the terms of the Apache License 2.0. See LICENSE file at the project root for terms.
 */
package com.yahoo.sketches.hll;

/**
 * This class is a container class for the regression curves used to correct for the consistent bias
 * of the HLL algorithm for bin array sizes from 1024 to 1048576. This class will consume
 * approximately 3600 bytes of static memory. Since all the arrays are static, there will be only
 * one copy per JVM.
 * 
 * @author Lee Rhodes
 */
class HLLRegression {
  /**
   * Number of segments per regression curve
   */
  static final int ARRLEN = 41;
  /**
   * The lowest value of <i>lg(bins)</i> with a regression curve.
   */
  public static final int HLL_LG_LOBINS = 10;
  /**
   * The highest value of <i>lg(bins)</i> with a regression curve.
   */
  public static final int HLL_LG_HIBINS = 20;
  
  /**
   * <p>
   * This is a two-dimensional array of regression curves used to correct for mean bias offset error
   * due to the use of the Hyper-LogLog algorithm at the lower end of its effective range: the
   * cardinalities from <i>bins</i> to <i>bins*2^(2.5)</i>. The first dimension selects the appropriate
   * curve based on the configured value of <i>bins</i> for the HLLSketch. The second dimension
   * value is the output from the raw Hyper-Log Log algorithm.
   * </p>
   * 
   * <p>
   * Using the proper curve from the configured value of <i>bins</i>, the corrected cardinality is
   * calculated by first finding the discrete interval that the raw HLL estimate lies between then
   * performing a two dimensional linear regression between the two closest points.
   * </p>
   * 
   * <p>
   * The intervals chosen for the correction curve are chosen such that the inferred correct values
   * at each point of the curve are evenly spaced if plotted on a log axis, thus the ratio of the
   * upper and lower bounds of the inferred correct values for any interval is a constant. This
   * results in a constant relative error for the placement of any point within the curve. The use
   * of logarithmic spacing allows the use of fewer regression segments and the corrected axis
   * values can be easily computed at runtime, both of which significantly reduce the amount of
   * static memory storage required.
   * </p>
   * 
   * <p>
   * The current implementation has chosen the dynamic range of each correction curve to be 2^(2.5)
   * ~ 5.66 and the ratio of the end points of each interval to be 2^(1/16). This produces
   * correction curves with 40 intervals and a total of 41 points per correction curve.
   * </p>
   * 
   * <p>
   * Extensive testing has shown that the individual segments of the curve are nearly straight with
   * measured mean relative errors less than 0.02% with 95% confidence.
   * </p>
   */
  /*
   * <p>Curve Generation: The points for each configuration value of bins are generated as follows:
   * <ul> <li>Using HLLSketchRegressionPoints set the following parameters in main() where N is the
   * Log_base2 (Lg) of the number of configured bins. <ul> <li>lgBins = N;</li> <li>String path =
   * "&lt;your directory&gt;";</li> </ul></li> <li>Run the program</li> <li>Extract first 40 values
   * from the column "MeanHLLEst" as TEXT.</li> <li>Assign the 41th value from the table below where
   * 2^(N+2.5).</li> <li>Repeat the above for the other powers of 2. </ul>
   */
  /*
   * End values: 2^(12.5) = 5.7926187514801980E3 2^(13.5) = 1.1585237502960395E4 2^(14.5) =
   * 2.3170475005920790E4 2^(15.5) = 4.6340950011841580E4 2^(16.5) = 9.2681900023683160E4 2^(17.5) =
   * 1.8536380004736633E5 2^(18.5) = 3.7072760009473265E5 2^(19.5) = 7.4145520018946530E5 2^(20.5) =
   * 1.4829104003789306E6 2^(21.5) = 2.9658208007578610E6 2^(22.5) = 5.9316416015157220E6
   */
  private static final double[][] RARR = {
      //r1024
      { 1.3468092850567093E3, 1.3788116664881807E3, 1.4130585102502230E3, 1.4487649056617838E3,
          1.4873172951497650E3, 1.5277158725571594E3, 1.5700114226902110E3, 1.6149763535178404E3,
          1.6630903840223600E3, 1.7138036662382040E3, 1.7668389060808880E3, 1.8237054977466780E3,
          1.8839033521621263E3, 1.9469879063050907E3, 2.0148126579728320E3, 2.0861075320417720E3,
          2.1598936931261173E3, 2.2410380154819904E3, 2.3248317509509520E3, 2.4138515584023003E3,
          2.5068307749595960E3, 2.6054364627339983E3, 2.7101387333092620E3, 2.8210199098158328E3,
          2.9359872594572334E3, 3.0578574873825323E3, 3.1871787765599520E3, 3.3216273635734124E3,
          3.4638485969944230E3, 3.6110315251593665E3, 3.7685374335083275E3, 3.9324168914975040E3,
          4.1033651022349580E3, 4.2829741297574540E3, 4.4698356300505410E3, 4.6677770426333700E3,
          4.8720173008702830E3, 5.0905237218466670E3, 5.3137986711697085E3, 5.5476494518999830E3,
          5.7926187514801980E3 }, //5.7951948547020600E3
          
      //r2048 =
      { 2.6942460855890954E3, 2.7591696984580150E3, 2.8268620445951087E3, 2.8987901251353023E3,
          2.9744504213273344E3, 3.0559504334861863E3, 3.1408299815037390E3, 3.2320831473653570E3,
          3.3261769110808423E3, 3.4289254397975214E3, 3.5336741381496550E3, 3.6480569292707370E3,
          3.7684753200079413E3, 3.8948828503003900E3, 4.0298680707573735E3, 4.1721200233667830E3,
          4.3230587616720990E3, 4.4812606541476330E3, 4.6493051760701490E3, 4.8281745012200190E3,
          5.0145528762786325E3, 5.2131783141696690E3, 5.4213544621157590E3, 5.6405503704907700E3,
          5.8734809130122320E3, 6.1175026414844615E3, 6.3729992950435590E3, 6.6459584170887930E3,
          6.9269181102968660E3, 7.2255411777140680E3, 7.5359397169428110E3, 7.8668953888674770E3,
          8.2081447535205930E3, 8.5625448619234000E3, 8.9431111441016670E3, 9.3348838422924470E3,
          9.7459604202839840E3, 1.0178336936820195E4, 1.0627253467945025E4, 1.1096365542425865E4,
          1.1585237502960395E4 }, //1.1579866868672910E4
          
      //r4096 =
      { 5.3894798891994650E3, 5.5188054956187350E3, 5.6553631028556590E3, 5.7984937700327170E3,
          5.9518512834545545E3, 6.1119035514387160E3, 6.2832927432371880E3, 6.4635754711257630E3,
          6.6542696971625150E3, 6.8565018565407690E3, 7.0709307403826320E3, 7.2982077213034390E3,
          7.5383694221525360E3, 7.7925182309184190E3, 8.0588867078004760E3, 8.3452870414506490E3,
          8.6446953848438600E3, 8.9667103417712990E3, 9.2988241392786930E3, 9.6535541050860850E3,
          1.0030848783653777E4, 1.0423977892164827E4, 1.0839079359973290E4, 1.1282257835606100E4,
          1.1746009589016921E4, 1.2231075626611377E4, 1.2747762865423489E4, 1.3288266853712770E4,
          1.3851749287938746E4, 1.4446436976037890E4, 1.5072339079701980E4, 1.5727762090680235E4,
          1.6411740758697808E4, 1.7131700001092980E4, 1.7878866053142454E4, 1.8667791639313644E4,
          1.9499705935554370E4, 2.0358011070532437E4, 2.1247672730185768E4, 2.2193055566030223E4,
          2.3170475005920790E4 }, //2.3171925847110917E4
          
      //r8192 =
      { 1.0780651618416792E4, 1.1039120965943457E4, 1.1311150138412513E4, 1.1598488050949129E4,
          1.1902500596490240E4, 1.2225272908654324E4, 1.2566954464263667E4, 1.2927479107575076E4,
          1.3308275292259554E4, 1.3714768290217462E4, 1.4144076627862003E4, 1.4596334875652674E4,
          1.5076180963056430E4, 1.5583723681488118E4, 1.6123144993806067E4, 1.6691636321299866E4,
          1.7291634011122205E4, 1.7929669128914353E4, 1.8598148903625110E4, 1.9308305008842923E4,
          2.0058052573829750E4, 2.0851034508246380E4, 2.1685682803351990E4, 2.2564699110421603E4,
          2.3492603232570968E4, 2.4468248382408492E4, 2.5499368147121586E4, 2.6574482090346950E4,
          2.7707444889368540E4, 2.8895474380444330E4, 3.0150318006469680E4, 3.1455039693456878E4,
          3.2825320657593606E4, 3.4264001400180070E4, 3.5764850483439586E4, 3.7339451917360230E4,
          3.8983324552327180E4, 4.0700216796276000E4, 4.2507537581251796E4, 4.4383738893317060E4,
          4.6340950011841580E4 }, //4.6345174625528010E4
          
      //r16384 =
      { 2.1562691667862146E4, 2.2077222286448650E4, 2.2620881996406228E4, 2.3196687026682004E4,
          2.3806327086121680E4, 2.4451827838675927E4, 2.5133989419387573E4, 2.5853596745289404E4,
          2.6619698652235653E4, 2.7430716530310530E4, 2.8288439894948937E4, 2.9191869353121852E4,
          3.0152274475819093E4, 3.1168340504721946E4, 3.2242417400701677E4, 3.3382912269590730E4,
          3.4587810238020860E4, 3.5860404284879380E4, 3.7198376866003310E4, 3.8626076120617750E4,
          4.0121738047263380E4, 4.1703313701606270E4, 4.3374747927717580E4, 4.5133704645869260E4,
          4.6986604281549364E4, 4.8937663716473100E4, 5.0996105950605700E4, 5.3149699338022450E4,
          5.5414908310735600E4, 5.7796263498885800E4, 6.0295944148785136E4, 6.2915674296434925E4,
          6.5655239700007270E4, 6.8531129230395270E4, 7.1533033165353850E4, 7.4672015257698480E4,
          7.7963206276231870E4, 8.1404364282898120E4, 8.5001002162850010E4, 8.8759796164197480E4,
          9.2681900023683160E4 }, //9.2680566677644890E4
          
      //r32768 =
      { 4.3128080262834235E4, 4.4154349728007770E4, 4.5242568240505170E4, 4.6396418690378460E4,
          4.7614361218038390E4, 4.8902437914566730E4, 5.0268085424476245E4, 5.1709145190644190E4,
          5.3242549964545470E4, 5.4863968630250140E4, 5.6573301113887420E4, 5.8393952184210490E4,
          6.0309651650135600E4, 6.2340661381277730E4, 6.4492468026157854E4, 6.6765666825447130E4,
          6.9169441378538020E4, 7.1715131120184320E4, 7.4402255946226030E4, 7.7246405136199350E4,
          8.0243510195155280E4, 8.3411045489137100E4, 8.6747947293008690E4, 9.0263502247438230E4,
          9.3976212915093540E4, 9.7875496356984470E4, 1.0197874805600426E5, 1.0629879097918503E5,
          1.1082915408417482E5, 1.1559323522056808E5, 1.2057529420075729E5, 1.2581867975482975E5,
          1.3131178981093070E5, 1.3706283327492976E5, 1.4305487462314076E5, 1.4935028674980380E5,
          1.5593930843494346E5, 1.6282609765481093E5, 1.6999795764701112E5, 1.7751341523847307E5,
          1.8536380004736633E5 }, //1.8538204475875132E5 
          
      //r65536 =
      { 8.6254201763368330E4, 8.8310658365836410E4, 9.0490949768946800E4, 9.2791578071435900E4,
          9.5229207828917480E4, 9.7806550485145980E4, 1.0053918841581779E5, 1.0342705291350643E5,
          1.0648226049809780E5, 1.0972243974222310E5, 1.1314651962203489E5, 1.1677996366795793E5,
          1.2062088443224170E5, 1.2468495526348663E5, 1.2898281426784971E5, 1.3353576177498370E5,
          1.3834649812930744E5, 1.4343540595120814E5, 1.4880556840417758E5, 1.5448545022341600E5,
          1.6048092637927522E5, 1.6681705097173390E5, 1.7349500655630513E5, 1.8052961794695084E5,
          1.8794903661847944E5, 1.9575187192545627E5, 2.0394914849130680E5, 2.1258736449184956E5,
          2.2166943969027165E5, 2.3118796887796064E5, 2.4116876341572070E5, 2.5163109153786124E5,
          2.6261416926549544E5, 2.7410193890231295E5, 2.8612782761613495E5, 2.9871649503834710E5,
          3.1188320387105830E5, 3.2564851799451250E5, 3.4004121778384305E5, 3.5506259862879430E5,
          3.7072760009473265E5 }, //3.7073154394061180E5
          
      //r131072
      { 1.7250840352673670E5, 1.7662131673167268E5, 1.8098189953789298E5, 1.8558315614287186E5,
          1.9045841565783505E5, 1.9561310097029217E5, 2.0107837683163537E5, 2.0685410582701294E5,
          2.1296452099619544E5, 2.1944487948444614E5, 2.2629303924406972E5, 2.3355992733591705E5,
          2.4124176886448420E5, 2.4936991052697320E5, 2.5796562853569974E5, 2.6707152354996727E5,
          2.7669299625861390E5, 2.8687081190241650E5, 2.9761113680835697E5, 3.0897090044683260E5,
          3.2096185275854997E5, 3.3363410194346780E5, 3.4699001311261026E5, 3.6105923589390167E5,
          3.7589807323695890E5, 3.9150374385091255E5, 4.0789829698261360E5, 4.2517472898369910E5,
          4.4333887938054330E5, 4.6237593775592130E5, 4.8233752683144140E5, 5.0326218307572250E5,
          5.2522833853099090E5, 5.4820387780462590E5, 5.7225565523226990E5, 5.9743299007669420E5,
          6.2376640774211660E5, 6.5129703598902500E5, 6.8008243556768610E5, 7.1012519725758860E5,
          7.4145520018946530E5 }, //7.4146308788122360E5
          
      //r262144
      { 3.4501680705347340E5, 3.5324263346334535E5, 3.6196379907578597E5, 3.7116631228574370E5,
          3.8091683131567010E5, 3.9122620194058435E5, 4.0215675366327073E5, 4.1370821165402590E5,
          4.2592904199239090E5, 4.3888975896889230E5, 4.5258607848813944E5, 4.6711985467183410E5,
          4.8248353772896840E5, 4.9873982105394640E5, 5.1593125707139950E5, 5.3414304709993450E5,
          5.5338599251722780E5, 5.7374162380483300E5, 5.9522227361671390E5, 6.1794180089366520E5,
          6.4192370551709990E5, 6.6726820388693560E5, 6.9398002622522050E5, 7.2211847178780330E5,
          7.5179614647391780E5, 7.8300748770182510E5, 8.1579659396522730E5, 8.5034945796739820E5,
          8.8667775876108660E5, 9.2475187551184250E5, 9.6467505366288280E5, 1.0065243661514450E6,
          1.0504566770619818E6, 1.0964077556092518E6, 1.1445113104645398E6, 1.1948659801533883E6,
          1.2475328154842332E6, 1.3025940719780500E6, 1.3601648711353722E6, 1.4202503945151772E6,
          1.4829104003789306E6 }, //1.4829261757624473E6
          
      //r524288
      { 6.9003361410694690E5, 7.0648526692669070E5, 7.2392759815157190E5, 7.4233262457148740E5,
          7.6183366263134020E5, 7.8245240388116870E5, 8.0431350732654150E5, 8.2741642330805180E5,
          8.5185808398478180E5, 8.7777951793778450E5, 9.0517215697627890E5, 9.3423970934366820E5,
          9.6496707545793690E5, 9.9747964210789280E5, 1.0318625141427990E6, 1.0682860941998690E6,
          1.1067719850344555E6, 1.1474832476096660E6, 1.1904445472334279E6, 1.2358836017873303E6,
          1.2838474110341999E6, 1.3345364077738712E6, 1.3879600524504410E6, 1.4442369435756067E6,
          1.5035922929478355E6, 1.5660149754036502E6, 1.6315931879304545E6, 1.7006989159347964E6,
          1.7733555175221732E6, 1.8495037510236850E6, 1.9293501073257655E6, 2.0130487323028900E6,
          2.1009133541239635E6, 2.1928155112185036E6, 2.2890226209290796E6, 2.3897319603067767E6,
          2.4950656309684664E6, 2.6051881439561000E6, 2.7203297422707444E6, 2.8405007890303545E6,
          2.9658208007578610E6 }, //2.9658523515248946E6
          
      //r1048576
      { 1.3800672282138937E6, 1.4129705338533814E6, 1.4478551963031439E6, 1.4846652491429748E6,
          1.5236673252626804E6, 1.5649048077623374E6, 1.6086270146530830E6, 1.6548328466161035E6,
          1.7037161679695635E6, 1.7555590358755690E6, 1.8103443139525577E6, 1.8684794186873364E6,
          1.9299341509158737E6, 1.9949592842157856E6, 2.0637250282855980E6, 2.1365721883997380E6,
          2.2135439700689110E6, 2.2949664952193320E6, 2.3808890944668557E6, 2.4717672035746607E6,
          2.5676948220683997E6, 2.6690728155477424E6, 2.7759201049008820E6, 2.8884738871512134E6,
          3.0071845858956710E6, 3.1320299508073004E6, 3.2631863758609090E6, 3.4013978318695930E6,
          3.5467110350443465E6, 3.6990075020473700E6, 3.8587002146515310E6, 4.0260974646057800E6,
          4.2018267082479270E6, 4.3856310224370070E6, 4.5780452418581590E6, 4.7794639206135530E6,
          4.9901312619369330E6, 5.2103762879122000E6, 5.4406594845414890E6, 5.6810015780607090E6,
          5.9316416015157220E6 } //5.9317047030497890E6
      };
  
  private HLLRegression() {}
  
  static double[][] getRegressionArrays() {
    return RARR.clone();
  }
  
  /**
   * <p>
   * Map the given <i>hllEst</i> (the output of the HLL algorithm) to a corrected cardinality value.
   * If the <i>hllEst</i> value is below the range of values for the selected <i>bins</i> curve,
   * zero will be returned. If it is above the range it will return the given <i>hllEst</i> value.
   * </p>
   * 
   * @param lgBins the number of Log-base 2 intervals.
   * @param hllEst the estimate from the HLL algorithm.
   * @return the corrected cardinality value.
   */
  static double regress(int lgBins, double hllEst) {
    int arrIdx = lgBins - HLL_LG_LOBINS;
    double[] arr = RARR[arrIdx];
    double lo = arr[0]; //lo, hi defined for bins dimension
    double hi = arr[ARRLEN - 1];
    if (hllEst < lo) {
      return 0; //signal below range
    }
    if (hllEst >= hi) {
      return hllEst;//signal above range
    }
    //linear guess "skip" search
    int i = (int) Math.floor((hllEst - lo) / (hi - lo));
    //if not right on it should be one below or one above 
    while (hllEst < arr[i]) {
      i-- ; //below the lower bound?
    }
    while (hllEst >= arr[i + 1]) {
      i++ ; //above the upper bound?
    }
    lo = arr[i]; //lo, hi now defined for the selected interior segment
    hi = arr[i + 1];
    //simple linear regression within segment.
    int bins = 1 << lgBins;
    double f = (hllEst - lo) / (hi - lo);
    double r1 = bins * Math.pow(2.0, i / 16.0);
    double r2 = bins * Math.pow(2.0, (i + 1) / 16.0);
    return r1 + (f * (r2 - r1));
  }
}